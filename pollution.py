import discord
import random

intents = discord.Intents.default()
intents.message_content = True

client = discord.Client(intents=intents)

commands = {
    '/hello': 'Saludar',
    '/pollution': 'Definici√≥n de Contaminaci√≥n',
    '/tips': 'Consejos sobre c√≥mo reducir la contaminaci√≥n',
    '/recycle': 'Informa sobre c√≥mo reciclar diferentes tipos de materiales',
    '/daily': 'Obtener un consejo aleatorio diario',
    '/suggest': 'Sugerir temas o preguntas para futuras actualizaciones del bot',
    '/suggestions': 'Ver las sugerencias registradas',
    '/clear': 'Limpiar el chat del canal actual'  # Agregar el nuevo comando
}

daily_tips = [
    "Apaga las luces cuando no las necesites para ahorrar energ√≠a.",
    "Usa una botella de agua reutilizable en lugar de botellas de pl√°stico.",
    "Recuerda separar tus residuos correctamente para facilitar el reciclaje.",
    "D√∫chate en lugar de ba√±arte para ahorrar agua.",
    "Compra productos locales y de temporada para reducir la huella de carbono.",
    "Utiliza el transporte p√∫blico o comparte viajes en autom√≥vil para reducir la contaminaci√≥n.",
    "Apaga tus dispositivos electr√≥nicos por la noche para ahorrar energ√≠a.",
    "Reutiliza bolsas de compras y envases siempre que sea posible.",
    "Planta √°rboles y flores en tu comunidad para mejorar la calidad del aire.",
    "Consume menos carne y l√°cteos para reducir el impacto ambiental de tu dieta."
]

used_tips = []
suggestions = []

@client.event
async def on_ready():
    print(f'Iniciamos sesi√≥n como {client.user}')

@client.event
async def on_message(message):
    if message.author == client.user:
        return

    if message.content.startswith('/hello'):
        await message.channel.send(f'¬°Hola, soy {client.user}! ¬°Encantado de conocerte, c√≥mo puedo ayudarte?')
    elif message.content.startswith('/pollution'):
        await pollution(message.channel)
    elif message.content.startswith('/tips'):
        await send_tips(message.channel)
    elif message.content.startswith('/recycle'):
        await recycle(message.channel)
    elif message.content.startswith('/daily'):
        await daily_tip(message.channel)
    elif message.content.startswith('/suggest'):
        suggestion = message.content[len('/suggest'):].strip()
        if suggestion:
            suggestions.append(suggestion)
            print("Sugerencia registrada:", suggestion)  
            await message.channel.send("¬°Gracias por tu sugerencia! La hemos registrado para futuras actualizaciones.")
    elif message.content.startswith('/suggestions'):  
        await send_suggestions(message.channel)
    elif message.content.startswith('/clear'):  # Agregar manejo para el comando '/clear'
        await clear_messages(message.channel)
    elif message.content.startswith('/help'):
        await send_help(message.channel)
    else:
        await message.channel.send("¬°No puedo procesar este comando, lo siento!")

async def send_help(channel):
    help_message = "Comandos disponibles:\n"
    for command, description in commands.items():
        help_message += f"{command}: {description}\n"
    await channel.send(help_message)

async def send_tips(channel):
    tips_message = "Consejos sobre c√≥mo reducir la contaminaci√≥n:\n"
    for tip in daily_tips:
        tips_message += f"{tip}\n"
    await channel.send(tips_message)

async def pollution(channel):
    pollution_definition = "La contaminaci√≥n es la introducci√≥n de contaminantes en el medio ambiente natural que causa un cambio adverso."
    await channel.send(pollution_definition)

async def recycle(channel):
    recycle_info = (
        "**Contenedores de reciclaje y sus materiales correspondientes:**\n\n"
        "üîµ **Contenedor Azul (Papel y Cart√≥n)**: Peri√≥dicos, revistas, papel de oficina, cart√≥n, cajas de cart√≥n, etc.\n\n"
        "üü° **Contenedor Amarillo (Envases de Pl√°stico, Latas y Tetra Brik)**: Botellas de pl√°stico, envases de pl√°stico, latas de aluminio, latas de conserva, envases de Tetra Brik, etc.\n\n"
        "üü¢ **Contenedor Verde (Vidrio)**: Botellas de vidrio, frascos de vidrio, tarros de conserva, etc.\n\n"
        "‚ö™ **Contenedor Blanco (Pilas y Bater√≠as)**: Pilas alcalinas, pilas recargables, bater√≠as de m√≥viles, etc.\n\n"
        "‚ö´ **Contenedor Negro (Resto o Residuos no Reciclables)**: Residuos que no son reciclables como pa√±ales, colillas de cigarrillos, etc.\n"
    )
    await channel.send(recycle_info)

async def daily_tip(channel):
    if len(used_tips) == len(daily_tips):
        await channel.send("¬°Ya has recibido todos los consejos! ¬°Vuelve ma√±ana para uno nuevo!")
        return
    
    tip = random.choice([t for t in daily_tips if t not in used_tips])
    used_tips.append(tip)
    
    await channel.send(f"Aqu√≠ tienes tu consejo diario: {tip}")

async def send_suggestions(channel):
    if suggestions:
        await channel.send("Aqu√≠ est√°n las sugerencias que hemos recibido hasta el momento:")
        for index, suggestion in enumerate(suggestions, start=1):
            await channel.send(f"{index}. {suggestion}")
    else:
        await channel.send("No hemos recibido ninguna sugerencia hasta el momento.")

async def clear_messages(channel):
    await channel.purge(limit=100)  # Elimina hasta 100 mensajes del canal

client.run('token')
